[{"/home/tfox121/Development/radioco-tech-test/src/index.js":"1","/home/tfox121/Development/radioco-tech-test/src/reportWebVitals.js":"2","/home/tfox121/Development/radioco-tech-test/src/utils/millisecondsToMinsAndSecs.js":"3","/home/tfox121/Development/radioco-tech-test/src/utils/timeAgo.js":"4","/home/tfox121/Development/radioco-tech-test/src/components/App.js":"5","/home/tfox121/Development/radioco-tech-test/src/components/SelectedEpisodeContext.js":"6","/home/tfox121/Development/radioco-tech-test/src/components/EpisodeList/index.js":"7","/home/tfox121/Development/radioco-tech-test/src/components/ProgressBar/index.js":"8","/home/tfox121/Development/radioco-tech-test/src/components/ProgressBar/ProgressBarStyles.js":"9","/home/tfox121/Development/radioco-tech-test/src/components/UseAudio.js":"10","/home/tfox121/Development/radioco-tech-test/src/components/useLocalStorage.js":"11","/home/tfox121/Development/radioco-tech-test/src/components/Player/index.js":"12","/home/tfox121/Development/radioco-tech-test/src/components/Player/PlayerStyles.js":"13","/home/tfox121/Development/radioco-tech-test/src/components/PlayOrPauseIcon/index.js":"14","/home/tfox121/Development/radioco-tech-test/src/components/MediaContext.js":"15"},{"size":735,"mtime":1610852609419,"results":"16","hashOfConfig":"17"},{"size":375,"mtime":1610811042020,"results":"18","hashOfConfig":"17"},{"size":244,"mtime":1610830382095,"results":"19","hashOfConfig":"17"},{"size":153,"mtime":1610835166175,"results":"20","hashOfConfig":"17"},{"size":3753,"mtime":1610911045263,"results":"21","hashOfConfig":"17"},{"size":137,"mtime":1610842539255,"results":"22","hashOfConfig":"17"},{"size":2096,"mtime":1610906260523,"results":"23","hashOfConfig":"17"},{"size":1062,"mtime":1610899455483,"results":"24","hashOfConfig":"17"},{"size":465,"mtime":1610899135073,"results":"25","hashOfConfig":"17"},{"size":75,"mtime":1610855643161,"results":"26","hashOfConfig":"17"},{"size":323,"mtime":1610858293969,"results":"27","hashOfConfig":"17"},{"size":5196,"mtime":1610910741103,"results":"28","hashOfConfig":"17"},{"size":931,"mtime":1610910673073,"results":"29","hashOfConfig":"17"},{"size":296,"mtime":1610905930253,"results":"30","hashOfConfig":"17"},{"size":191,"mtime":1610909629553,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"18izfak",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tfox121/Development/radioco-tech-test/src/index.js",[],["66","67","68","69","70","71"],"/home/tfox121/Development/radioco-tech-test/src/reportWebVitals.js",[],"/home/tfox121/Development/radioco-tech-test/src/utils/millisecondsToMinsAndSecs.js",[],"/home/tfox121/Development/radioco-tech-test/src/utils/timeAgo.js",[],"/home/tfox121/Development/radioco-tech-test/src/components/App.js",[],"/home/tfox121/Development/radioco-tech-test/src/components/SelectedEpisodeContext.js",[],"/home/tfox121/Development/radioco-tech-test/src/components/EpisodeList/index.js",["72"],"import { useContext, useState } from 'react';\nimport { Item } from 'semantic-ui-react';\nimport timeAgo from '../../utils/timeAgo';\nimport PlayOrPauseIcon from '../PlayOrPauseIcon';\n\nimport SelectedEpisodeContext from '../SelectedEpisodeContext';\n\nconst EpisodeLine = ({ episodeData, index, audioPlayer }) => {\n  const { selectedEpisode, setSelectedEpisode } = useContext(SelectedEpisodeContext);\n  const [isPaused, setIsPaused] = useState(true);\n\n  const episodeSelectedAndPlaying = selectedEpisode\n  && selectedEpisode.id === episodeData.id && !isPaused;\n\n  const handleClick = () => {\n    if (episodeSelectedAndPlaying) {\n      audioPlayer.current.pause();\n      return;\n    }\n    setSelectedEpisode({ index, ...episodeData });\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const durationMinutes = episodeData.duration / 60000;\n\n  audioPlayer.current.addEventListener('pause', () => {\n    setIsPaused(true);\n  });\n\n  audioPlayer.current.addEventListener('play', () => {\n    setIsPaused(false);\n  });\n\n  return (\n    <Item>\n      <Item.Image size=\"tiny\" src={episodeData.artwork.urls[0].url} />\n      <Item.Content>\n        <Item.Header>{episodeData.title}</Item.Header>\n        {/* <Item.Meta></Item.Meta> */}\n        <Item.Description>\n          <div dangerouslySetInnerHTML={{ __html: episodeData.description }} />\n        </Item.Description>\n        <Item.Extra>\n          <PlayOrPauseIcon paused={!episodeSelectedAndPlaying} handleClick={handleClick} size=\"big\" />\n          {durationMinutes.toFixed(0)}\n          {' mins Â· '}\n          {timeAgo.format(Date.parse(episodeData.published_at))}\n          {episodeSelectedAndPlaying && episodeSelectedAndPlaying.toString()}\n        </Item.Extra>\n      </Item.Content>\n    </Item>\n  );\n};\n\nexport default ({ sortedEpisodes, audioPlayer }) => (\n  <Item.Group divided>\n    {sortedEpisodes\n      && sortedEpisodes.map((episodeData, index) => (\n        <EpisodeLine\n          episodeData={episodeData}\n          audioPlayer={audioPlayer}\n          index={index}\n          key={episodeData.id}\n        />\n      ))}\n  </Item.Group>\n);\n","/home/tfox121/Development/radioco-tech-test/src/components/ProgressBar/index.js",["73"],"import { useContext } from 'react';\nimport { Loader, Progress } from 'semantic-ui-react';\nimport millisecondsToMinsAndSecs from '../../utils/millisecondsToMinsAndSecs';\nimport SelectedEpisodeContext from '../SelectedEpisodeContext';\nimport { Bar, ProgressWrapper } from './ProgressBarStyles';\n\nexport default ({ currentTime, isPlaying, readyState }) => {\n  const { selectedEpisode } = useContext(SelectedEpisodeContext);\n\n  const handleClick = (e) => {\n    const x = e.pageX - e.target.offsetLeft;\n\n    console.log(x);\n  };\n\n  return (\n    <ProgressWrapper>\n      {readyState === 2\n        ? (\n          <>\n            <div>{millisecondsToMinsAndSecs(currentTime * 1000)}</div>\n            <Bar>\n              <Progress onClick={handleClick} size=\"tiny\" active={isPlaying} color=\"orange\" value={currentTime * 1000} total={selectedEpisode.duration} />\n            </Bar>\n            <div>{millisecondsToMinsAndSecs(selectedEpisode.duration)}</div>\n          </>\n        )\n        : <Loader active size=\"small\" inline=\"centered\" />}\n    </ProgressWrapper>\n  );\n};\n","/home/tfox121/Development/radioco-tech-test/src/components/ProgressBar/ProgressBarStyles.js",[],"/home/tfox121/Development/radioco-tech-test/src/components/UseAudio.js",[],"/home/tfox121/Development/radioco-tech-test/src/components/useLocalStorage.js",[],"/home/tfox121/Development/radioco-tech-test/src/components/Player/index.js",["74","75","76","77"],"import { useContext, useEffect, useState } from 'react';\nimport {\n  Header, Icon, Image, Segment,\n} from 'semantic-ui-react';\nimport { Slider } from 'react-semantic-ui-range';\n\n// import UseAudio from '../UseAudio';\nimport ProgressBar from '../ProgressBar';\nimport SelectedEpisodeContext from '../SelectedEpisodeContext';\nimport {\n  Controls,\n  Mask,\n  Metadata, PlayerStyles, Spacer, Text,\n} from './PlayerStyles';\nimport useLocalStorage from '../useLocalStorage';\nimport PlayOrPauseIcon from '../PlayOrPauseIcon';\nimport { Media } from '../MediaContext';\n\nexport default ({ sortedEpisodes, audioPlayer }) => {\n  const { selectedEpisode, setSelectedEpisode } = useContext(\n    SelectedEpisodeContext,\n  );\n\n  // const audio = UseAudio().current;\n  const audio = audioPlayer.current;\n  const [currentTime, setCurrentTime] = useState(\n    audio ? audio.currentTime : 0,\n  );\n  const [volume, setVolume] = useState(0.5);\n  const [isPaused, setIsPaused] = useState(true);\n  const [readyState, setReadyState] = useState(0);\n\n  const [storedEpisode, setStoredEpisode] = useLocalStorage('episode');\n\n  useEffect(() => {\n    if (selectedEpisode) {\n      setStoredEpisode(selectedEpisode.id);\n    }\n\n    if (\n      !selectedEpisode\n      && storedEpisode\n      && sortedEpisodes\n      && sortedEpisodes.length\n    ) {\n      let episodeIndex;\n      const episode = sortedEpisodes.filter(\n        (stored, index) => {\n          if (stored.id === storedEpisode) {\n            episodeIndex = index;\n            return true;\n          }\n          return false;\n        },\n      )[0];\n      setSelectedEpisode({ index: episodeIndex, ...episode });\n    }\n  }, [\n    selectedEpisode,\n    sortedEpisodes,\n    storedEpisode,\n    setSelectedEpisode,\n    setStoredEpisode,\n  ]);\n\n  useEffect(() => {\n    if (audio) {\n      setReadyState(audio.readyState);\n    }\n  }, [audio]);\n\n  useEffect(() => {\n    if (audio) {\n      audio.volume = volume;\n    }\n  }, [volume]);\n\n  useEffect(() => {\n    if (selectedEpisode) {\n      console.log(selectedEpisode);\n      audio.setAttribute('src', selectedEpisode.url);\n      audio.play();\n    }\n  }, [selectedEpisode]);\n\n  // useEffect(() => {\n  //   if (audio) {\n  //     audio.paused ? audio.play() : audio.pause();\n  //   }\n  // }, [audio]);\n\n  if (!selectedEpisode || !audio) {\n    return null;\n  }\n\n  const playPause = () => {\n    isPaused ? audio.play() : audio.pause();\n  };\n\n  const skipBackward = () => {\n    setReadyState(0);\n    if (selectedEpisode.index === 0) {\n      setSelectedEpisode(selectedEpisode);\n      return;\n    }\n    setSelectedEpisode({\n      index: selectedEpisode.index - 1,\n      ...sortedEpisodes[selectedEpisode.index - 1],\n    });\n  };\n\n  const skipForward = () => {\n    setReadyState(0);\n    if (selectedEpisode.index === sortedEpisodes.length - 1) {\n      return;\n    }\n    setSelectedEpisode({\n      index: selectedEpisode.index + 1,\n      ...sortedEpisodes[selectedEpisode.index + 1],\n    });\n  };\n\n  const settings = {\n    start: 0.5,\n    min: 0,\n    max: 1,\n    step: 0.1,\n    onChange: (value) => {\n      setVolume(value);\n    },\n  };\n\n  audio.addEventListener('canplay', () => {\n    setReadyState(2);\n  });\n\n  audio.addEventListener('pause', () => {\n    setIsPaused(true);\n  });\n\n  audio.addEventListener('play', () => {\n    setIsPaused(false);\n  });\n\n  audio.addEventListener('timeupdate', () => {\n    setCurrentTime(audio.currentTime);\n  });\n\n  audio.addEventListener('ended', () => {\n    skipForward();\n  });\n\n  return (\n    <PlayerStyles>\n      <Segment\n        basic\n        inverted\n        textAlign=\"left\"\n        style={{\n          background: `url(${selectedEpisode.artwork.urls[1].url}) center/cover`,\n        }}\n      >\n        <Mask />\n        <Metadata>\n          <Media greaterThan=\"mobile\">\n            <Image src={selectedEpisode.artwork.urls[1].url} />\n          </Media>\n          <Text>\n            <Segment basic inverted>\n              <div>\n                <Header size=\"large\" className=\"now-playing__name\">\n                  {selectedEpisode.title}\n                </Header>\n                <Header size=\"tiny\" className=\"now-playing__artist\">\n                  {selectedEpisode.author}\n                </Header>\n                <div\n                  inverted\n                  dangerouslySetInnerHTML={{\n                    __html: selectedEpisode.description,\n                  }}\n                />\n              </div>\n            </Segment>\n            <Spacer />\n            <Controls>\n              <Icon name=\"step backward\" size=\"large\" onClick={skipBackward} />\n              <PlayOrPauseIcon\n                paused={isPaused}\n                handleClick={playPause}\n                size=\"huge\"\n              />\n              <Icon name=\"step forward\" size=\"large\" onClick={skipForward} />\n            </Controls>\n            <ProgressBar\n              currentTime={currentTime}\n              isPlaying={!audio.paused}\n              readyState={readyState}\n            />\n            <Slider\n              inverted\n              value={volume}\n              color=\"orange\"\n              settings={settings}\n            />\n          </Text>\n        </Metadata>\n      </Segment>\n    </PlayerStyles>\n  );\n};\n","/home/tfox121/Development/radioco-tech-test/src/components/Player/PlayerStyles.js",[],"/home/tfox121/Development/radioco-tech-test/src/components/PlayOrPauseIcon/index.js",[],"/home/tfox121/Development/radioco-tech-test/src/components/MediaContext.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":41,"column":16,"nodeType":"92","endLine":41,"endColumn":77},{"ruleId":"93","severity":1,"message":"94","line":13,"column":5,"nodeType":"95","messageId":"96","endLine":13,"endColumn":16},{"ruleId":"97","severity":1,"message":"98","line":76,"column":6,"nodeType":"99","endLine":76,"endColumn":14,"suggestions":"100"},{"ruleId":"93","severity":1,"message":"94","line":80,"column":7,"nodeType":"95","messageId":"96","endLine":80,"endColumn":18},{"ruleId":"97","severity":1,"message":"98","line":84,"column":6,"nodeType":"99","endLine":84,"endColumn":23,"suggestions":"101"},{"ruleId":"90","severity":1,"message":"91","line":179,"column":19,"nodeType":"92","endLine":181,"endColumn":21},"lines-around-directive",["102"],"no-spaced-func",["103"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"react/no-danger","Dangerous property 'dangerouslySetInnerHTML' found","JSXAttribute","no-console","Unexpected console statement.","MemberExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'audio'. Either include it or remove the dependency array.","ArrayExpression",["104"],["105"],"padding-line-between-statements","func-call-spacing",{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [audio, volume]",{"range":"110","text":"111"},"Update the dependencies array to be: [audio, selectedEpisode]",{"range":"112","text":"113"},[1935,1943],"[audio, volume]",[2115,2132],"[audio, selectedEpisode]"]